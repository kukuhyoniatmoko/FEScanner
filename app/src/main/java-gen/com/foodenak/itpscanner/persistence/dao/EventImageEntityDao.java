package com.foodenak.itpscanner.persistence.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.foodenak.itpscanner.persistence.db.EventImageEntity;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "EVENT_IMAGE_ENTITY".
 */
public class EventImageEntityDao extends AbstractDao<EventImageEntity, Long> {

  public static final String TABLENAME = "EVENT_IMAGE_ENTITY";
  private Query<EventImageEntity> eventEntity_EventImageEntityListQuery;
  ;

  public EventImageEntityDao(DaoConfig config) {
    super(config);
  }

  public EventImageEntityDao(DaoConfig config, DaoSession daoSession) {
    super(config, daoSession);
  }

  /** Creates the underlying database table. */
  public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
    String constraint = ifNotExists ? "IF NOT EXISTS " : "";
    db.execSQL("CREATE TABLE " + constraint + "\"EVENT_IMAGE_ENTITY\" (" + //
        "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
        "\"IMAGE_URL\" TEXT," + // 1: imageUrl
        "\"EVENT_ID\" INTEGER);"); // 2: eventId
  }

  /** Drops the underlying database table. */
  public static void dropTable(SQLiteDatabase db, boolean ifExists) {
    String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT_IMAGE_ENTITY\"";
    db.execSQL(sql);
  }

  /** @inheritdoc */
  @Override protected void bindValues(SQLiteStatement stmt, EventImageEntity entity) {
    stmt.clearBindings();

    Long id = entity.getId();
    if (id != null) {
      stmt.bindLong(1, id);
    }

    String imageUrl = entity.getImageUrl();
    if (imageUrl != null) {
      stmt.bindString(2, imageUrl);
    }

    Long eventId = entity.getEventId();
    if (eventId != null) {
      stmt.bindLong(3, eventId);
    }
  }

  /** @inheritdoc */
  @Override public Long readKey(Cursor cursor, int offset) {
    return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
  }

  /** @inheritdoc */
  @Override public EventImageEntity readEntity(Cursor cursor, int offset) {
    EventImageEntity entity = new EventImageEntity( //
        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
        cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imageUrl
        cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // eventId
    );
    return entity;
  }

  /** @inheritdoc */
  @Override public void readEntity(Cursor cursor, EventImageEntity entity, int offset) {
    entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
    entity.setImageUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    entity.setEventId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
  }

  /** @inheritdoc */
  @Override protected Long updateKeyAfterInsert(EventImageEntity entity, long rowId) {
    entity.setId(rowId);
    return rowId;
  }

  /** @inheritdoc */
  @Override public Long getKey(EventImageEntity entity) {
    if (entity != null) {
      return entity.getId();
    } else {
      return null;
    }
  }

  /** @inheritdoc */
  @Override protected boolean isEntityUpdateable() {
    return true;
  }

  /** Internal query to resolve the "eventImageEntityList" to-many relationship of EventEntity. */
  public List<EventImageEntity> _queryEventEntity_EventImageEntityList(Long eventId) {
    synchronized (this) {
      if (eventEntity_EventImageEntityListQuery == null) {
        QueryBuilder<EventImageEntity> queryBuilder = queryBuilder();
        queryBuilder.where(Properties.EventId.eq(null));
        eventEntity_EventImageEntityListQuery = queryBuilder.build();
      }
    }
    Query<EventImageEntity> query = eventEntity_EventImageEntityListQuery.forCurrentThread();
    query.setParameter(0, eventId);
    return query.list();
  }

  /**
   * Properties of entity EventImageEntity.<br/>
   * Can be used for QueryBuilder and for referencing column names.
   */
  public static class Properties {
    public final static Property Id = new Property(0, Long.class, "id", true, "_id");
    public final static Property ImageUrl =
        new Property(1, String.class, "imageUrl", false, "IMAGE_URL");
    public final static Property EventId =
        new Property(2, Long.class, "eventId", false, "EVENT_ID");
  }
}
