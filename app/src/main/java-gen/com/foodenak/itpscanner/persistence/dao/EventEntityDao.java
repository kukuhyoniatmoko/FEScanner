package com.foodenak.itpscanner.persistence.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.foodenak.itpscanner.persistence.db.EventEntity;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "EVENT_ENTITY".
 */
public class EventEntityDao extends AbstractDao<EventEntity, Long> {

  public static final String TABLENAME = "EVENT_ENTITY";
  private DaoSession daoSession;
  ;

  public EventEntityDao(DaoConfig config) {
    super(config);
  }

  public EventEntityDao(DaoConfig config, DaoSession daoSession) {
    super(config, daoSession);
    this.daoSession = daoSession;
  }

  /** Creates the underlying database table. */
  public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
    String constraint = ifNotExists ? "IF NOT EXISTS " : "";
    db.execSQL("CREATE TABLE " + constraint + "\"EVENT_ENTITY\" (" + //
        "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
        "\"SERVER_ID\" INTEGER," + // 1: serverId
        "\"NAME\" TEXT," + // 2: name
        "\"DESCRIPTION\" TEXT," + // 3: description
        "\"SLUG\" TEXT," + // 4: slug
        "\"START_DATE\" INTEGER," + // 5: startDate
        "\"END_DATE\" INTEGER," + // 6: endDate
        "\"IS_SHOWN\" INTEGER," + // 7: isShown
        "\"VIEWS\" INTEGER);"); // 8: views
  }

  /** Drops the underlying database table. */
  public static void dropTable(SQLiteDatabase db, boolean ifExists) {
    String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT_ENTITY\"";
    db.execSQL(sql);
  }

  /** @inheritdoc */
  @Override protected void bindValues(SQLiteStatement stmt, EventEntity entity) {
    stmt.clearBindings();

    Long id = entity.getId();
    if (id != null) {
      stmt.bindLong(1, id);
    }

    Long serverId = entity.getServerId();
    if (serverId != null) {
      stmt.bindLong(2, serverId);
    }

    String name = entity.getName();
    if (name != null) {
      stmt.bindString(3, name);
    }

    String description = entity.getDescription();
    if (description != null) {
      stmt.bindString(4, description);
    }

    String slug = entity.getSlug();
    if (slug != null) {
      stmt.bindString(5, slug);
    }

    java.util.Date startDate = entity.getStartDate();
    if (startDate != null) {
      stmt.bindLong(6, startDate.getTime());
    }

    java.util.Date endDate = entity.getEndDate();
    if (endDate != null) {
      stmt.bindLong(7, endDate.getTime());
    }

    Boolean isShown = entity.getIsShown();
    if (isShown != null) {
      stmt.bindLong(8, isShown ? 1L : 0L);
    }

    Integer views = entity.getViews();
    if (views != null) {
      stmt.bindLong(9, views);
    }
  }

  @Override protected void attachEntity(EventEntity entity) {
    super.attachEntity(entity);
    entity.__setDaoSession(daoSession);
  }

  /** @inheritdoc */
  @Override public Long readKey(Cursor cursor, int offset) {
    return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
  }

  /** @inheritdoc */
  @Override public EventEntity readEntity(Cursor cursor, int offset) {
    EventEntity entity = new EventEntity( //
        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
        cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // serverId
        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
        cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
        cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // slug
        cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)),
        // startDate
        cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)),
        // endDate
        cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isShown
        cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // views
    );
    return entity;
  }

  /** @inheritdoc */
  @Override public void readEntity(Cursor cursor, EventEntity entity, int offset) {
    entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
    entity.setServerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
    entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
    entity.setSlug(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    entity.setStartDate(
        cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
    entity.setEndDate(
        cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
    entity.setIsShown(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
    entity.setViews(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
  }

  /** @inheritdoc */
  @Override protected Long updateKeyAfterInsert(EventEntity entity, long rowId) {
    entity.setId(rowId);
    return rowId;
  }

  /** @inheritdoc */
  @Override public Long getKey(EventEntity entity) {
    if (entity != null) {
      return entity.getId();
    } else {
      return null;
    }
  }

  /** @inheritdoc */
  @Override protected boolean isEntityUpdateable() {
    return true;
  }

  /**
   * Properties of entity EventEntity.<br/>
   * Can be used for QueryBuilder and for referencing column names.
   */
  public static class Properties {
    public final static Property Id = new Property(0, Long.class, "id", true, "_id");
    public final static Property ServerId =
        new Property(1, Long.class, "serverId", false, "SERVER_ID");
    public final static Property Name = new Property(2, String.class, "name", false, "NAME");
    public final static Property Description =
        new Property(3, String.class, "description", false, "DESCRIPTION");
    public final static Property Slug = new Property(4, String.class, "slug", false, "SLUG");
    public final static Property StartDate =
        new Property(5, java.util.Date.class, "startDate", false, "START_DATE");
    public final static Property EndDate =
        new Property(6, java.util.Date.class, "endDate", false, "END_DATE");
    public final static Property IsShown =
        new Property(7, Boolean.class, "isShown", false, "IS_SHOWN");
    public final static Property Views = new Property(8, Integer.class, "views", false, "VIEWS");
  }
}
