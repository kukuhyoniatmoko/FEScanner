package com.foodenak.itpscanner.persistence.db;

import com.foodenak.itpscanner.persistence.dao.DaoSession;
import com.foodenak.itpscanner.persistence.dao.EventEntityDao;
import com.foodenak.itpscanner.persistence.dao.EventImageEntityDao;
import de.greenrobot.dao.DaoException;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "EVENT_ENTITY".
 */
public class EventEntity implements java.io.Serializable {

  private Long id;
  private Long serverId;
  private String name;
  private String description;
  private String slug;
  private java.util.Date startDate;
  private java.util.Date endDate;
  private Boolean isShown;
  private Integer views;

  /** Used to resolve relations */
  private transient DaoSession daoSession;

  /** Used for active entity operations. */
  private transient EventEntityDao myDao;

  private List<EventImageEntity> eventImageEntityList;

  // KEEP FIELDS - put your custom fields here
  // KEEP FIELDS END

  public EventEntity() {
  }

  public EventEntity(Long id) {
    this.id = id;
  }

  public EventEntity(Long id, Long serverId, String name, String description, String slug,
      java.util.Date startDate, java.util.Date endDate, Boolean isShown, Integer views) {
    this.id = id;
    this.serverId = serverId;
    this.name = name;
    this.description = description;
    this.slug = slug;
    this.startDate = startDate;
    this.endDate = endDate;
    this.isShown = isShown;
    this.views = views;
  }

  /** called by internal mechanisms, do not call yourself. */
  public void __setDaoSession(DaoSession daoSession) {
    this.daoSession = daoSession;
    myDao = daoSession != null ? daoSession.getEventEntityDao() : null;
  }

  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Long getServerId() {
    return serverId;
  }

  public void setServerId(Long serverId) {
    this.serverId = serverId;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }

  public java.util.Date getStartDate() {
    return startDate;
  }

  public void setStartDate(java.util.Date startDate) {
    this.startDate = startDate;
  }

  public java.util.Date getEndDate() {
    return endDate;
  }

  public void setEndDate(java.util.Date endDate) {
    this.endDate = endDate;
  }

  public Boolean getIsShown() {
    return isShown;
  }

  public void setIsShown(Boolean isShown) {
    this.isShown = isShown;
  }

  public Integer getViews() {
    return views;
  }

  public void setViews(Integer views) {
    this.views = views;
  }

  /**
   * To-many relationship, resolved on first access (and after reset). Changes to to-many relations
   * are not persisted, make changes to the target entity.
   */
  public List<EventImageEntity> getEventImageEntityList() {
    if (eventImageEntityList == null) {
      if (daoSession == null) {
        throw new DaoException("Entity is detached from DAO context");
      }
      EventImageEntityDao targetDao = daoSession.getEventImageEntityDao();
      List<EventImageEntity> eventImageEntityListNew =
          targetDao._queryEventEntity_EventImageEntityList(id);
      synchronized (this) {
        if (eventImageEntityList == null) {
          eventImageEntityList = eventImageEntityListNew;
        }
      }
    }
    return eventImageEntityList;
  }

  /** Resets a to-many relationship, making the next get call to query for a fresh result. */
  public synchronized void resetEventImageEntityList() {
    eventImageEntityList = null;
  }

  /**
   * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity
   * context.
   */
  public void delete() {
    if (myDao == null) {
      throw new DaoException("Entity is detached from DAO context");
    }
    myDao.delete(this);
  }

  /**
   * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity
   * context.
   */
  public void update() {
    if (myDao == null) {
      throw new DaoException("Entity is detached from DAO context");
    }
    myDao.update(this);
  }

  /**
   * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity
   * context.
   */
  public void refresh() {
    if (myDao == null) {
      throw new DaoException("Entity is detached from DAO context");
    }
    myDao.refresh(this);
  }

  // KEEP METHODS - put your custom methods here
  // KEEP METHODS END
}
