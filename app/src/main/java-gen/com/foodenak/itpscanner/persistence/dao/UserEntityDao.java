package com.foodenak.itpscanner.persistence.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.foodenak.itpscanner.persistence.db.UserEntity;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "USER_ENTITY".
 */
public class UserEntityDao extends AbstractDao<UserEntity, Long> {

  public static final String TABLENAME = "USER_ENTITY";

  public UserEntityDao(DaoConfig config) {
    super(config);
  }

  ;

  public UserEntityDao(DaoConfig config, DaoSession daoSession) {
    super(config, daoSession);
  }

  /** Creates the underlying database table. */
  public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
    String constraint = ifNotExists ? "IF NOT EXISTS " : "";
    db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY\" (" + //
        "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
        "\"HASH_ID\" TEXT UNIQUE ," + // 1: hashId
        "\"NAME\" TEXT," + // 2: name
        "\"USERNAME\" TEXT UNIQUE ," + // 3: username
        "\"EMAIL\" TEXT," + // 4: email
        "\"USER_PRIVILEGE_ID\" INTEGER," + // 5: userPrivilegeId
        "\"ACCESS_TOKEN\" TEXT," + // 6: accessToken
        "\"REDEEM_LUCKYDIP_AT\" INTEGER," + // 7: redeemLuckydipAt
        "\"REDEEM_VOUCHER_AT\" INTEGER," + // 8: redeemVoucherAt
        "\"IMAGE_URL\" TEXT);"); // 9: imageUrl
  }

  /** Drops the underlying database table. */
  public static void dropTable(SQLiteDatabase db, boolean ifExists) {
    String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY\"";
    db.execSQL(sql);
  }

  /** @inheritdoc */
  @Override protected void bindValues(SQLiteStatement stmt, UserEntity entity) {
    stmt.clearBindings();

    Long id = entity.getId();
    if (id != null) {
      stmt.bindLong(1, id);
    }

    String hashId = entity.getHashId();
    if (hashId != null) {
      stmt.bindString(2, hashId);
    }

    String name = entity.getName();
    if (name != null) {
      stmt.bindString(3, name);
    }

    String username = entity.getUsername();
    if (username != null) {
      stmt.bindString(4, username);
    }

    String email = entity.getEmail();
    if (email != null) {
      stmt.bindString(5, email);
    }

    Integer userPrivilegeId = entity.getUserPrivilegeId();
    if (userPrivilegeId != null) {
      stmt.bindLong(6, userPrivilegeId);
    }

    String accessToken = entity.getAccessToken();
    if (accessToken != null) {
      stmt.bindString(7, accessToken);
    }

    java.util.Date redeemLuckydipAt = entity.getRedeemLuckydipAt();
    if (redeemLuckydipAt != null) {
      stmt.bindLong(8, redeemLuckydipAt.getTime());
    }

    java.util.Date redeemVoucherAt = entity.getRedeemVoucherAt();
    if (redeemVoucherAt != null) {
      stmt.bindLong(9, redeemVoucherAt.getTime());
    }

    String imageUrl = entity.getImageUrl();
    if (imageUrl != null) {
      stmt.bindString(10, imageUrl);
    }
  }

  /** @inheritdoc */
  @Override public Long readKey(Cursor cursor, int offset) {
    return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
  }

  /** @inheritdoc */
  @Override public UserEntity readEntity(Cursor cursor, int offset) {
    UserEntity entity = new UserEntity( //
        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
        cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // hashId
        cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
        cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
        cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
        cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // userPrivilegeId
        cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // accessToken
        cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)),
        // redeemLuckydipAt
        cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)),
        // redeemVoucherAt
        cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // imageUrl
    );
    return entity;
  }

  /** @inheritdoc */
  @Override public void readEntity(Cursor cursor, UserEntity entity, int offset) {
    entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
    entity.setHashId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
    entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    entity.setUserPrivilegeId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
    entity.setAccessToken(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
    entity.setRedeemLuckydipAt(
        cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
    entity.setRedeemVoucherAt(
        cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
    entity.setImageUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
  }

  /** @inheritdoc */
  @Override protected Long updateKeyAfterInsert(UserEntity entity, long rowId) {
    entity.setId(rowId);
    return rowId;
  }

  /** @inheritdoc */
  @Override public Long getKey(UserEntity entity) {
    if (entity != null) {
      return entity.getId();
    } else {
      return null;
    }
  }

  /** @inheritdoc */
  @Override protected boolean isEntityUpdateable() {
    return true;
  }

  /**
   * Properties of entity UserEntity.<br/>
   * Can be used for QueryBuilder and for referencing column names.
   */
  public static class Properties {
    public final static Property Id = new Property(0, Long.class, "id", true, "_id");
    public final static Property HashId = new Property(1, String.class, "hashId", false, "HASH_ID");
    public final static Property Name = new Property(2, String.class, "name", false, "NAME");
    public final static Property Username =
        new Property(3, String.class, "username", false, "USERNAME");
    public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
    public final static Property UserPrivilegeId =
        new Property(5, Integer.class, "userPrivilegeId", false, "USER_PRIVILEGE_ID");
    public final static Property AccessToken =
        new Property(6, String.class, "accessToken", false, "ACCESS_TOKEN");
    public final static Property RedeemLuckydipAt =
        new Property(7, java.util.Date.class, "redeemLuckydipAt", false, "REDEEM_LUCKYDIP_AT");
    public final static Property RedeemVoucherAt =
        new Property(8, java.util.Date.class, "redeemVoucherAt", false, "REDEEM_VOUCHER_AT");
    public final static Property ImageUrl =
        new Property(9, String.class, "imageUrl", false, "IMAGE_URL");
  }
}
