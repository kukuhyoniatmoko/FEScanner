package com.foodenak.itpscanner.persistence.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import com.foodenak.itpscanner.persistence.db.HistoryEntity;
import com.foodenak.itpscanner.persistence.db.UserEntity;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "HISTORY_ENTITY".
 */
public class HistoryEntityDao extends AbstractDao<HistoryEntity, Long> {

  public static final String TABLENAME = "HISTORY_ENTITY";
  private DaoSession daoSession;
  ;
  private String selectDeep;

  public HistoryEntityDao(DaoConfig config) {
    super(config);
  }

  public HistoryEntityDao(DaoConfig config, DaoSession daoSession) {
    super(config, daoSession);
    this.daoSession = daoSession;
  }

  /** Creates the underlying database table. */
  public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
    String constraint = ifNotExists ? "IF NOT EXISTS " : "";
    db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_ENTITY\" (" + //
        "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
        "\"EVENT_ID\" INTEGER," + // 1: eventId
        "\"LAST_REDEEM_DATE\" INTEGER," + // 2: lastRedeemDate
        "\"USER_ID\" INTEGER);"); // 3: userId
  }

  /** Drops the underlying database table. */
  public static void dropTable(SQLiteDatabase db, boolean ifExists) {
    String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_ENTITY\"";
    db.execSQL(sql);
  }

  /** @inheritdoc */
  @Override protected void bindValues(SQLiteStatement stmt, HistoryEntity entity) {
    stmt.clearBindings();

    Long id = entity.getId();
    if (id != null) {
      stmt.bindLong(1, id);
    }

    Long eventId = entity.getEventId();
    if (eventId != null) {
      stmt.bindLong(2, eventId);
    }

    java.util.Date lastRedeemDate = entity.getLastRedeemDate();
    if (lastRedeemDate != null) {
      stmt.bindLong(3, lastRedeemDate.getTime());
    }

    Long userId = entity.getUserId();
    if (userId != null) {
      stmt.bindLong(4, userId);
    }
  }

  @Override protected void attachEntity(HistoryEntity entity) {
    super.attachEntity(entity);
    entity.__setDaoSession(daoSession);
  }

  /** @inheritdoc */
  @Override public Long readKey(Cursor cursor, int offset) {
    return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
  }

  /** @inheritdoc */
  @Override public HistoryEntity readEntity(Cursor cursor, int offset) {
    HistoryEntity entity = new HistoryEntity( //
        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
        cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // eventId
        cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)),
        // lastRedeemDate
        cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // userId
    );
    return entity;
  }

  /** @inheritdoc */
  @Override public void readEntity(Cursor cursor, HistoryEntity entity, int offset) {
    entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
    entity.setEventId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
    entity.setLastRedeemDate(
        cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
    entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
  }

  /** @inheritdoc */
  @Override protected Long updateKeyAfterInsert(HistoryEntity entity, long rowId) {
    entity.setId(rowId);
    return rowId;
  }

  /** @inheritdoc */
  @Override public Long getKey(HistoryEntity entity) {
    if (entity != null) {
      return entity.getId();
    } else {
      return null;
    }
  }

  /** @inheritdoc */
  @Override protected boolean isEntityUpdateable() {
    return true;
  }

  protected String getSelectDeep() {
    if (selectDeep == null) {
      StringBuilder builder = new StringBuilder("SELECT ");
      SqlUtils.appendColumns(builder, "T", getAllColumns());
      builder.append(',');
      SqlUtils.appendColumns(builder, "T0", daoSession.getUserEntityDao().getAllColumns());
      builder.append(" FROM HISTORY_ENTITY T");
      builder.append(" LEFT JOIN USER_ENTITY T0 ON T.\"USER_ID\"=T0.\"_id\"");
      builder.append(' ');
      selectDeep = builder.toString();
    }
    return selectDeep;
  }

  protected HistoryEntity loadCurrentDeep(Cursor cursor, boolean lock) {
    HistoryEntity entity = loadCurrent(cursor, 0, lock);
    int offset = getAllColumns().length;

    UserEntity userEntity = loadCurrentOther(daoSession.getUserEntityDao(), cursor, offset);
    entity.setUserEntity(userEntity);

    return entity;
  }

  public HistoryEntity loadDeep(Long key) {
    assertSinglePk();
    if (key == null) {
      return null;
    }

    StringBuilder builder = new StringBuilder(getSelectDeep());
    builder.append("WHERE ");
    SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
    String sql = builder.toString();

    String[] keyArray = new String[] { key.toString() };
    Cursor cursor = db.rawQuery(sql, keyArray);

    try {
      boolean available = cursor.moveToFirst();
      if (!available) {
        return null;
      } else if (!cursor.isLast()) {
        throw new IllegalStateException(
            "Expected unique result, but count was " + cursor.getCount());
      }
      return loadCurrentDeep(cursor, true);
    } finally {
      cursor.close();
    }
  }

  /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
  public List<HistoryEntity> loadAllDeepFromCursor(Cursor cursor) {
    int count = cursor.getCount();
    List<HistoryEntity> list = new ArrayList<HistoryEntity>(count);

    if (cursor.moveToFirst()) {
      if (identityScope != null) {
        identityScope.lock();
        identityScope.reserveRoom(count);
      }
      try {
        do {
          list.add(loadCurrentDeep(cursor, false));
        } while (cursor.moveToNext());
      } finally {
        if (identityScope != null) {
          identityScope.unlock();
        }
      }
    }
    return list;
  }

  protected List<HistoryEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
    try {
      return loadAllDeepFromCursor(cursor);
    } finally {
      cursor.close();
    }
  }

  /** A raw-style query where you can pass any WHERE clause and arguments. */
  public List<HistoryEntity> queryDeep(String where, String... selectionArg) {
    Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
    return loadDeepAllAndCloseCursor(cursor);
  }

  /**
   * Properties of entity HistoryEntity.<br/>
   * Can be used for QueryBuilder and for referencing column names.
   */
  public static class Properties {
    public final static Property Id = new Property(0, Long.class, "id", true, "_id");
    public final static Property EventId =
        new Property(1, Long.class, "eventId", false, "EVENT_ID");
    public final static Property LastRedeemDate =
        new Property(2, java.util.Date.class, "lastRedeemDate", false, "LAST_REDEEM_DATE");
    public final static Property UserId = new Property(3, Long.class, "userId", false, "USER_ID");
  }
}
